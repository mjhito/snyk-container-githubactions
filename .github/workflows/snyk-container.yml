name: Snyk Container Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security-analysis:
    name: üõ°Ô∏è Snyk Container Security Analysis
    runs-on: ubuntu-latest
    env:
      ###############################################################
      # IMPORTANT: Set the correct regional API endpoint for your Snyk account
      # Default/Global: https://api.snyk.io
      # US: https://api.us.snyk.io  
      # EU: https://api.eu.snyk.io
      # AU: https://api.au.snyk.io
      ###############################################################
      SNYK_API: https://api.us.snyk.io
      
      ###############################################################
      # Set to true to fail the pipeline on high/critical severity issues (default: false)
      # By default, the scan continues even if issues are found (exit code 0)
      # To fail on high/critical issues, set SNYK_CONTAINER_FAIL_ON_ISSUES: true above
      ###############################################################
      SNYK_CONTAINER_FAIL_ON_ISSUES: false
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîß Setup Snyk
        uses: snyk/actions/setup@master

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üõ°Ô∏è Snyk Container Test (Pre-Build) Base Image Security Scan 
        run: |
          echo "‚è±Ô∏è Starting base image security scan..."
          start_time=$(date +%s)
          
          echo "üîç Scanning base image ubuntu:18.04 for vulnerabilities..."
          snyk container test ubuntu:18.04 || true
          
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "üî• BASE IMAGE SCAN COMPLETED IN: $duration SECONDS üî•"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: üèóÔ∏è Build Container Image
        run: |
          echo "‚è±Ô∏è Starting container build..."
          start_time=$(date +%s)
          
          echo "üèóÔ∏è Building container image for Snyk demo..."
          docker build -t snyk-container-demo:latest .
          
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "üî• CONTAINER BUILD COMPLETED IN: $duration SECONDS üî•"

      - name: üõ°Ô∏è Snyk Container test (with timing)
        run: |
          echo "‚è±Ô∏è Starting Snyk Container scan..."
          start_time=$(date +%s)
          
          # Run Snyk Container test
          if [[ "${{ env.SNYK_CONTAINER_FAIL_ON_ISSUES }}" == "true" ]]; then
            echo "‚ùó Pipeline will fail if high/critical issues are found"
            snyk container test snyk-container-demo:latest --file=Dockerfile --severity-threshold=high && SCAN_RESULT=0 || SCAN_RESULT=$?
          else
            echo "‚ÑπÔ∏è Pipeline will continue regardless of issues found (reporting only)"
            snyk container test snyk-container-demo:latest --file=Dockerfile || true
            SCAN_RESULT=0
          fi
          
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "üî• SNYK CONTAINER SCAN COMPLETED IN: $duration SECONDS üî•"
          
          # If scan failed due to vulnerabilities, provide clear message
          if [[ $SCAN_RESULT -ne 0 ]]; then
            echo ""
            echo "‚ùå ==========================================="
            echo "‚ùå SECURITY GATE BLOCKED THIS DEPLOYMENT"
            echo "‚ùå High or Critical vulnerabilities detected!"
            echo "‚ùå Fix the issues above before merging."
            echo "‚ùå ==========================================="
            echo ""
            echo "üí° Tip: Download the HTML report below for detailed remediation guidance"
          fi
          
          # Exit with the scan result AFTER we output the message
          exit $SCAN_RESULT
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: üìä Generate HTML Report
        if: always()
        run: |
          echo "üìä Generating HTML report..."
          TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
          REPORT_NAME="${{ github.event.repository.name }}-snyk-container-report-${TIMESTAMP}.html"
          snyk container test snyk-container-demo:latest --file=Dockerfile --json > snyk-container.json || true
          npx snyk-to-html -i snyk-container.json -o "${REPORT_NAME}"
          echo "‚úÖ HTML report generated: ${REPORT_NAME}"
          echo "REPORT_NAME=${REPORT_NAME}" >> $GITHUB_ENV
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: üìã Generate SBOM (Multiple Formats)
        if: always()
        run: |
          echo "‚è±Ô∏è Starting SBOM generation..."
          start_time=$(date +%s)
          
          echo "üìã Generating SBOMs in multiple formats..."
          mkdir -p sbom-artifacts
          
          # Generate CycloneDX 1.6 JSON (latest)
          echo "üîÑ Generating CycloneDX 1.6 JSON SBOM..."
          snyk container sbom --format=cyclonedx1.6+json snyk-container-demo:latest > sbom-artifacts/sbom-cyclonedx-1.6.json
          
          # Generate CycloneDX 1.6 XML
          echo "üîÑ Generating CycloneDX 1.6 XML SBOM..."
          snyk container sbom --format=cyclonedx1.6+xml snyk-container-demo:latest > sbom-artifacts/sbom-cyclonedx-1.6.xml
          
          # Generate SPDX 2.3 JSON
          echo "üîÑ Generating SPDX 2.3 JSON SBOM..."
          snyk container sbom --format=spdx2.3+json snyk-container-demo:latest > sbom-artifacts/sbom-spdx-2.3.json
          
          # Generate OS-only SBOM (excluding app dependencies)
          echo "üîÑ Generating OS-only SBOM..."
          snyk container sbom --format=cyclonedx1.6+json --exclude-app-vulns snyk-container-demo:latest > sbom-artifacts/sbom-os-only.json
          
          # Generate summary
          echo "üìä Generated $(ls sbom-artifacts/*.json sbom-artifacts/*.xml | wc -l) SBOM files" > sbom-artifacts/generation-summary.txt
          ls -la sbom-artifacts/ >> sbom-artifacts/generation-summary.txt
          
          cat sbom-artifacts/generation-summary.txt
          
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "üî• SBOM GENERATION COMPLETED IN: $duration SECONDS üî•"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: üì° Container Monitor (Monitoring Mode)
        if: always()
        run: |
          echo "‚è±Ô∏è Starting container monitoring setup..."
          start_time=$(date +%s)
          
          echo "üì° Setting up continuous monitoring..."
          snyk container monitor snyk-container-demo:latest || echo "‚ö†Ô∏è Monitoring setup failed (normal for demo)"
          
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "üî• MONITORING SETUP COMPLETED IN: $duration SECONDS üî•"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: üìä SBOM Monitor (SBOM Monitoring Mode)
        if: always()
        run: |
          echo "‚è±Ô∏è Starting SBOM monitoring setup..."
          start_time=$(date +%s)
          
          echo "üìä Setting up SBOM continuous monitoring..."
          # Monitor the main SBOM file for ongoing vulnerability tracking
          if [ -f "sbom-artifacts/sbom-cyclonedx-1.6.json" ]; then
            snyk sbom monitor sbom-artifacts/sbom-cyclonedx-1.6.json --experimental || echo "‚ö†Ô∏è SBOM monitoring setup failed (normal for demo)"
            echo "‚úÖ SBOM monitoring configured for CycloneDX 1.6 JSON"
          else
            echo "‚ö†Ô∏è No SBOM file found for monitoring"
          fi
          
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "üî• SBOM MONITORING SETUP COMPLETED IN: $duration SECONDS üî•"
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: üì§ Upload HTML Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-snyk-container-report
          path: ${{ env.REPORT_NAME }}

      - name: üì§ Upload SBOM Collection
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-sbom-collection
          path: sbom-artifacts/

      - name: üì• Download Report Instructions
        if: always()
        run: |
          echo "==========================================="
          echo "üì• REPORTS AVAILABLE FOR DOWNLOAD"
          echo "==========================================="
          echo ""
          echo "üõ°Ô∏è CONTAINER SECURITY REPORTS:"
          echo "1. Interactive HTML vulnerability report"
          echo "2. Complete SBOM collection (4 formats)"
          echo ""
          echo "üì¶ HOW TO DOWNLOAD:"
          echo "1. Scroll down to the bottom of this page"
          echo "2. Find 'Artifacts' section"  
          echo "3. Click on reports to download:"
          echo "   - ${{ github.event.repository.name }}-snyk-container-report"
          echo "   - ${{ github.event.repository.name }}-sbom-collection"
          echo "4. Extract the ZIP file to view reports"
          echo ""
          echo "üìã SBOM FORMATS INCLUDED:"
          echo "- CycloneDX 1.6 (JSON & XML)"
          echo "- SPDX 2.3 (JSON)"
          echo "- OS-only SBOM (excluding app dependencies)"
          echo ""
          echo "üåê Direct link to this run:"
          echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
          if [[ "${{ env.SNYK_CONTAINER_FAIL_ON_ISSUES }}" == "true" ]]; then
            echo "üõ°Ô∏è Security gate: ENABLED (blocking high/critical issues)"
          else
            echo "üìä Security gate: DISABLED (reporting only, not blocking)"
          fi
          echo ""
          echo "üî• SNYK CONTAINER DEMO COMPLETE! üî•"
